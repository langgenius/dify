"""remove unused is_deleted field from conversations

Revision ID: 4f02b6704509
Revises: b95962a3885c
Create Date: 2025-09-02 20:12:37.311318

"""
from alembic import op
import models as models
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision = '4f02b6704509'
down_revision = 'b95962a3885c'
branch_labels = None
depends_on = None

# Backup table name for soft-deleted conversations
backup_table_name = 'conversations_4f02b6704509_bak'


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Create backup table for soft-deleted conversations
    
    # Check if there are any soft-deleted conversations
    result = op.get_bind().execute(sa.text("SELECT COUNT(*) FROM conversations WHERE is_deleted = true"))
    count = result.scalar()
    
    if count > 0:
        # Create backup table with all columns from conversations
        op.execute(sa.text(f"""
            CREATE TABLE {backup_table_name} AS
            SELECT * FROM conversations WHERE is_deleted = true
        """))
    
    # Delete soft-deleted conversations from main table
    op.execute("DELETE FROM conversations WHERE is_deleted = true")
    
    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.drop_column('is_deleted')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('conversations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    
    # Restore soft-deleted conversations from backup table if it exists
    
    # Check if backup table exists using inspector (works for all database types)
    bind = op.get_bind()
    inspector = inspect(bind)
    existing_tables = inspector.get_table_names()
    
    if backup_table_name in existing_tables:
        # Restore the soft-deleted conversations
        op.execute(sa.text(f"""
            INSERT INTO conversations 
            SELECT * FROM {backup_table_name}
        """))
        
        # Drop the backup table after restoration
        op.execute(sa.text(f"DROP TABLE {backup_table_name}"))

    # ### end Alembic commands ###
