# (파일 상단에는 version: '3.8' 등이 올 수 있습니다)

services:
  # ... (api, worker, web, db, redis 등 다른 서비스 정의는 기존 Dify 공식 파일을 따릅니다) ...

  # Certbot service (Dify의 Nginx가 SSL을 직접 처리하도록 할 경우)
  # Dokploy의 자체 SSL 기능을 사용한다면 이 서비스는 필수는 아닐 수 있습니다.
  certbot:
    image: certbot/certbot
    profiles:
      - certbot # docker-compose --profile certbot up 등으로 별도 실행 필요할 수 있음
    volumes:
      - ./volumes/certbot/conf:/etc/letsencrypt # Dokploy가 관리하는 경로로 변경될 수 있음
      - ./volumes/certbot/www:/var/www/html # Dokploy가 관리하는 경로로 변경될 수 있음
      # Dify 공식 파일의 certbot 볼륨 정의를 참조하세요.
      # 예: - ./certbot/docker-entrypoint.sh:/docker-entrypoint.sh (만약 있다면)
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL} # Dokploy 환경 변수에서 설정
      - CERTBOT_DOMAIN=${CERTBOT_DOMAIN} # Dokploy 환경 변수에서 설정
    # entrypoint 및 command는 Dify 공식 설정을 따르세요.

  # The nginx reverse proxy.
  nginx:
    image: nginx:latest
    restart: always
    # entrypoint는 Dify 공식 파일의 설정을 따르는 것이 중요합니다.
    # 예: entrypoint: [ 'sh', '-c', "cp /docker-entrypoint-mount.sh /docker-entrypoint.sh && sed -i 's/\\r$$//' /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh && /docker-entrypoint.sh" ]
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME:-_} # 보통 서비스 도메인 (예: dify.xsfire.com)
      NGINX_HTTPS_ENABLED: "${NGINX_HTTPS_ENABLED:-true}" # HTTPS 사용 여부, Dokploy SSL 사용 시 false로 할 수도 있음
      NGINX_PORT: ${NGINX_PORT:-80} # Nginx 컨테이너 내부 HTTP 포트
      NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443} # Nginx 컨테이너 내부 HTTPS 포트
      NGINX_SSL_CERT_FILENAME: ${NGINX_SSL_CERT_FILENAME:-dify.crt}
      NGINX_SSL_CERT_KEY_FILENAME: ${NGINX_SSL_CERT_KEY_FILENAME:-dify.key}
      # ... 기타 Nginx 환경 변수 (Dify 공식 파일 참조) ...
      CERTBOT_DOMAIN: ${CERTBOT_DOMAIN:-} # Dokploy 환경 변수에서 설정
      CERTBOT_EMAIL: ${CERTBOT_EMAIL:-}   # Dokploy 환경 변수에서 설정 (Dify Nginx가 SSL 직접 처리 시)
      NGINX_ENABLE_CERTBOT_CHALLENGE: "${NGINX_ENABLE_CERTBOT_CHALLENGE:-true}" # Dify Nginx가 SSL 직접 처리 시
    volumes: # 이 부분이 매우 중요합니다!
      # Nginx 설정 템플릿 (프로젝트 내 상대 경로)
      - ./nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template
      # Nginx 엔트리포인트 스크립트 (프로젝트 내 상대 경로)
      - ./nginx/docker-entrypoint.sh:/docker-entrypoint.sh
      # 필요한 경우, Dify 공식 파일에 있는 다른 볼륨들 (예: 에러 페이지 HTML)
      # - ./nginx/error_403_ratelimit.html:/usr/share/nginx/html/error_403_ratelimit.html
      # - ./nginx/error_50x.html:/usr/share/nginx/html/error_50x.html

      # SSL 인증서 및 Certbot 챌린지용 볼륨 (Dify Nginx가 SSL 직접 처리 시)
      # 이 경로들은 Dokploy의 영구 저장소 설정과 연관될 수 있습니다.
      # Dokploy가 SSL을 전적으로 관리한다면 이 볼륨들은 다르게 처리되거나 필요 없을 수 있습니다.
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/certbot # Let's Encrypt 챌린지 경로
    depends_on:
      - api
      - web
      # - certbot # Dify Nginx가 SSL 직접 처리 시 (옵션)
    ports: # 컨테이너 포트를 외부에 노출합니다. Dokploy가 이 포트들을 사용하여 트래픽을 전달합니다.
      - "${EXPOSE_NGINX_PORT:-80}:${NGINX_PORT:-80}"
      - "${EXPOSE_NGINX_SSL_PORT:-443}:${NGINX_SSL_PORT:-443}"

# ... (networks, volumes 등의 최상위 레벨 정의는 Dify 공식 파일을 따릅니다) ...

# 예시: 최상위 레벨 volumes 정의 (Dify 공식 파일 참조)
# volumes:
#   db_data:
#   redis_data:
#   app_storage:
#   certbot_conf: # Dokploy가 관리하는 경로로 대체될 수 있음
#   certbot_www:  # Dokploy가 관리하는 경로로 대체될 수 있음
#   (nginx 서비스 volumes에 명시된 ./volumes/ 하위 경로들도 실제로는 Dokploy에 의해 관리되는 영구 볼륨과 연결될 수 있습니다)
