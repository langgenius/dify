# Multi-stage Railway-optimized Dockerfile
FROM node:18-alpine as web-builder

WORKDIR /app/web
COPY web/package*.json ./
RUN npm ci --only=production

COPY web/ ./
RUN npm run build

# Python API Stage
FROM python:3.12-slim as api-base

WORKDIR /app/api

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gcc \
        g++ \
        libc-dev \
        libffi-dev \
        libxml2-dev \
        libxslt-dev \
        curl \
    && rm -rf /var/lib/apt/lists/*

# Copy and install Python dependencies
COPY api/pyproject.toml api/uv.lock ./
RUN pip install uv \
    && uv sync --frozen --no-dev \
    && rm -rf ~/.cache/pip ~/.cache/uv

# Copy API source
COPY api/ ./

# Web production stage  
FROM nginx:alpine as web

COPY --from=web-builder /app/web/out /usr/share/nginx/html
COPY docker/nginx/nginx.conf.template /etc/nginx/templates/default.conf.template

EXPOSE 3000

# API production stage
FROM api-base as api

ENV PYTHONPATH=/app/api
ENV FLASK_APP=app.py

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:5001/health || exit 1

EXPOSE 5001

# Default to API server
CMD ["python", "app.py"]

# Worker stage  
FROM api-base as worker

ENV PYTHONPATH=/app/api
ENV MODE=worker

CMD ["python", "-m", "celery", "worker", "-A", "app.celery", "--loglevel=info"]
